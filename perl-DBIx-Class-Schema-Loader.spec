%define upstream_name	 DBIx-Class-Schema-Loader
%define upstream_version 0.07001

Name:       perl-%{upstream_name}
Version:    %perl_convert_version %{upstream_version}
Release:    %mkrel 1
Epoch:      1

Summary:	Dynamic definition of a DBIx::Class::Schema
License:	GPL+ or Artistic
Group:		Development/Perl
Url:		http://search.cpan.org/dist/%{upstream_name}
Source0:    http://www.cpan.org/modules/by-module/DBIx/%{upstream_name}-%{upstream_version}.tar.gz

BuildRequires:	perl(Class::Data::Accessor)
BuildRequires:	perl(Class::Unload)
BuildRequires:	perl(Data::Dump)
BuildRequires:	perl(DBD::mysql)
BuildRequires:	perl(DBD::Pg)
BuildRequires:	perl(DBD::SQLite)
BuildRequires:	perl(DBD::SQLite2)
BuildRequires:	perl(DBD::Sybase)
BuildRequires:	perl(DBI) >= 1.56
BuildRequires:	perl(DBIx::Class) >= 0.70.60
BuildRequires:	perl(Lingua::EN::Inflect::Number)
BuildRequires:	perl(Lingua::EN::Inflect::Phrase)
BuildRequires:  perl(Test::Exception)
BuildRequires:  perl(Test::More)  >= 0.940.0
BuildRequires:	perl(UNIVERSAL::require)

BuildArch:	noarch
BuildRoot:	%{_tmppath}/%{name}-%{version}-%{release}

%description
DBIx::Class::Schema::Loader automates the definition of a DBIx::Class::Schema
by scanning database table definitions and setting up the columns, primary
keys, and relationships.

DBIx::Class::Schema::Loader currently supports only the DBI storage type. It
has explicit support for DBD::Pg, DBD::mysql, DBD::DB2, DBD::SQLite, and
DBD::Oracle. Other DBI drivers may function to a greater or lesser degree with
this loader, depending on how much of the DBI spec they implement, and how
standard their implementation is.

See DBIx::Class::Schema::Loader::DBI::Writing for notes on writing your own
vendor-specific subclass for an unsupported DBD driver.

This module obsoletes the older DBIx::Class::Loader.

This module is designed more to get you up and running quickly against an
existing database, or to be effective for simple situations, rather than to be
what you use in the long term for a complex database/project.

That being said, transitioning your code from a Schema generated by this module
to one that doesn't use this module should be straightforward and painless, so
don't shy away from it just for fears of the transition down the road.

%prep
%setup -q -n %{upstream_name}-%{upstream_version}

%build
%{__perl}  -pi -e "s/('DBD::(DB2|Oracle))/#$1/g" Makefile.PL
%{__perl} Makefile.PL INSTALLDIRS=vendor --skipdeps
%make

%check
%make test

%install
rm -rf %{buildroot}
%makeinstall_std

%clean
rm -rf %{buildroot}

%files
%defattr(-,root,root)
%{perl_vendorlib}/DBIx
%{_mandir}/*/*
%{_bindir}/dbicdump
